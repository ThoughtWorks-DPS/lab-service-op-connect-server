---
version: 2.1

orbs:
  terraform: twdps/terraform@0.5.0
  # used for github-release-notes feature
  executor-tools: twdps/executor-tools@0.8.0

# ==== global pipeline parameters

parameters:
  terraform-version:
    description: terraform version for all jobs
    type: string
    default: "1.2.2"
  executor-image:
    description: image to use for terraform runs
    type: string
    default: twdps/circleci-infra-aws:alpine-1.7.0

# git push: deploy sandbox
on-push-main: &on-push-main
  branches:
    only: /main/
  tags:
    ignore: /.*/

# git tag: release to preview cluster
on-tag-main: &on-tag-main
  branches:
    ignore: /.*/
  tags:
    only: /.*/

commands:

  set-environment:
    description: set terraform backend
    steps:
      - run:
          name: set ~/.terraformrc
          command: bash scripts/tf_backend.sh

jobs:

  update-dashboard:
    docker:
      - image: << pipeline.parameters.executor-image >>
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: update datadog cluster monitors
          command: python scripts/deploy_dashboard.py

  update-monitors:
    parameters:
      env:
        description: which op-connect instance, sandbox or preview
        type: string
      instance:
        description: tag\alb filters
        type: string
      cluster:
        description: ecs-cluster where service runs
        type: string
    docker:
      - image: << pipeline.parameters.executor-image >>
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: update datadog dashboard
          command: python scripts/deploy_monitors.py << parameters.env >> << parameters.cluster >> << parameters.instance >>

  account-level-credentials:
    parameters:
      instance:
        description: name of environments file
        type: string
      key:
        description: name of credential to create
        type: string
    docker:
      - image: << pipeline.parameters.executor-image >>
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: create secretes manager key entry if not already present
          command: |
            bash scripts/create_secrets_manager_entry.sh << parameters.instance>> << parameters.key >>

  integration-test:
    docker:
      - image: << pipeline.parameters.executor-image >>
    parameters:
      instance:
        description: instance identifier
        type: string
      vault:
        description: vault from which to fetch test key/value
        type: string
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: smoke test op-connect server
          command: python scripts/tf_backend.sh << parameters.instance >> << parameters.vault >>

workflows:
  version: 2

  deploy-test-instance:
    jobs:
      # sandbox deployment
      - account-level-credentials:
          name: account-credentials-for-test-instance
          instance: test
          key: "test-op-connect-credential-file"
          filters: *on-push-main

      - terraform/plan:
          name: change-plan-for-test-instance
          workspace: test
          var-file: environments/test.json
          extra-terraform-args: -var="op_credentials_file_base64=${TEST_OP_CREDENTIAL_FILE_BASE64}"
          terraform-version: << pipeline.parameters.terraform-version >>
          before-terraform:
            - set-environment
          requires:
            - account-credentials-for-test-instance
          filters: *on-push-main

      - approve-changes-to-test-instance:
          type: approval
          requires:
            - change-plan-for-test-instance
          filters: *on-push-main

      - terraform/apply:
          name: apply-changes-to-test-instance
          workspace: test
          var-file: environments/test.json
          extra-terraform-args: -var="op_credentials_file_base64=${TEST_OP_CREDENTIAL_FILE_BASE64}"
          terraform-version: << pipeline.parameters.terraform-version >>
          before-terraform:
            - set-environment
          requires:
            - approve-changes-to-test-instance
          filters: *on-push-main

      - integration-test:
          instance: test
          vault: empc-lab-test
          requires:
            - apply-changes-to-test-instance
          filters: *on-push-main

      - update-dashboard:
          context: twdps-core-labs-team
          filters: *on-push-main

      - update-monitors:
          name: update-test-instance-monitors
          env: test
          cluster: op-connect-test
          instance: test-op-connect-api-alb
          context: twdps-core-labs-team
          filters: *on-push-main

  deploy-prod-instance:
    jobs:
      # production deployment
      - account-level-credentials:
          name: account-credentials-for-prod-instance
          instance: prod
          key: "op-connect-credential-file"
          filters: *on-tag-main

      - terraform/plan:
          name: change-plan-for-prod-instance
          workspace: prod
          var-file: environments/prod.json
          extra-terraform-args: -var="op_credentials_file_base64=${OP_CREDENTIAL_FILE_BASE64}"
          terraform-version: << pipeline.parameters.terraform-version >>
          before-terraform:
            - set-environment
          filters: *on-tag-main

      - approve-changes-to-prod-instance:
          type: approval
          requires:
            - change-plan-for-prod-instance
          filters: *on-tag-main

      - terraform/apply:
          name: apply-changes-to-prod-instance
          workspace: prod
          var-file: environments/prod.json
          extra-terraform-args: -var="op_credentials_file_base64=${OP_CREDENTIAL_FILE_BASE64}"
          terraform-version: << pipeline.parameters.terraform-version >>
          before-terraform:
            - set-environment
          requires:
            - approve-changes-to-prod-instance
          filters: *on-tag-main

      - integration-test:
          instance: test
          vault: empc-lab-test
          equires:
            - apply-changes-to-prod-instance
          filters: *on-tag-main

      - update-monitors:
          name: update-prod-instance-monitors
          env: prod
          cluster: op-connect
          instance: op-connect-api-alb
          context: twdps-core-labs-team
          filters: *on-tag-main

  # generate-release-notes:
  #   jobs:
  #     - executor-tools/release:
  #         name: release-lab-service-op-connect
  #         context: twdps-core-labs-team
  #         shell: op run --env-file op.env -- /bin/bash
  #         on-tag: true
  #         filters: *on-tag-main


  # uncomment this workflow to do a full teardown of either instance
  
  lab-service-op-connect-server-teardown:
    jobs:
      - approve-test-teardown:
          type: approval
          filters: *on-push-main

      - terraform/destroy:
          name: delete-test-op-connect-server-resources
          workspace: test
          var-file: environments/test.json
          extra-terraform-args: -var="op_credentials_file_base64=${TEST_OP_CREDENTIAL_FILE_BASE64}"
          terraform-version: << pipeline.parameters.terraform-version >>
          before-terraform:
            - set-environment
          requires:
            - approve-test-teardown
          filters: *on-push-main

      - approve-prod-teardown:
          type: approval
          filters: *on-push-main

      - terraform/destroy:
          name: delete-prod-op-connect-server-resources
          workspace: prod
          var-file: environments/preprodview.json
          extra-terraform-args: -var="op_credentials_file_base64=${OP_CREDENTIAL_FILE_BASE64}"
          terraform-version: << pipeline.parameters.terraform-version >>
          before-terraform:
            - set-environment
          requires:
            - approve-prod-teardown
          filters: *on-push-main
